// Generated by gencpp from file pos_control/DoPositionControlResult.msg
// DO NOT EDIT!


#ifndef POS_CONTROL_MESSAGE_DOPOSITIONCONTROLRESULT_H
#define POS_CONTROL_MESSAGE_DOPOSITIONCONTROLRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pos_control
{
template <class ContainerAllocator>
struct DoPositionControlResult_
{
  typedef DoPositionControlResult_<ContainerAllocator> Type;

  DoPositionControlResult_()
    : p_i()  {
    }
  DoPositionControlResult_(const ContainerAllocator& _alloc)
    : p_i(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _p_i_type;
  _p_i_type p_i;





  typedef boost::shared_ptr< ::pos_control::DoPositionControlResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pos_control::DoPositionControlResult_<ContainerAllocator> const> ConstPtr;

}; // struct DoPositionControlResult_

typedef ::pos_control::DoPositionControlResult_<std::allocator<void> > DoPositionControlResult;

typedef boost::shared_ptr< ::pos_control::DoPositionControlResult > DoPositionControlResultPtr;
typedef boost::shared_ptr< ::pos_control::DoPositionControlResult const> DoPositionControlResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pos_control::DoPositionControlResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pos_control::DoPositionControlResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pos_control::DoPositionControlResult_<ContainerAllocator1> & lhs, const ::pos_control::DoPositionControlResult_<ContainerAllocator2> & rhs)
{
  return lhs.p_i == rhs.p_i;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pos_control::DoPositionControlResult_<ContainerAllocator1> & lhs, const ::pos_control::DoPositionControlResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pos_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pos_control::DoPositionControlResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pos_control::DoPositionControlResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pos_control::DoPositionControlResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pos_control::DoPositionControlResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pos_control::DoPositionControlResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pos_control::DoPositionControlResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pos_control::DoPositionControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e771ef082d91116266f80125fe749ce3";
  }

  static const char* value(const ::pos_control::DoPositionControlResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe771ef082d911162ULL;
  static const uint64_t static_value2 = 0x66f80125fe749ce3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pos_control::DoPositionControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pos_control/DoPositionControlResult";
  }

  static const char* value(const ::pos_control::DoPositionControlResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pos_control::DoPositionControlResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#Result\n"
"float32[] p_i   #posicion actual\n"
;
  }

  static const char* value(const ::pos_control::DoPositionControlResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pos_control::DoPositionControlResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p_i);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DoPositionControlResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pos_control::DoPositionControlResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pos_control::DoPositionControlResult_<ContainerAllocator>& v)
  {
    s << indent << "p_i[]" << std::endl;
    for (size_t i = 0; i < v.p_i.size(); ++i)
    {
      s << indent << "  p_i[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p_i[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POS_CONTROL_MESSAGE_DOPOSITIONCONTROLRESULT_H
